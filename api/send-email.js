import nodemailer from 'nodemailer';

export default async function handler(req, res) {
  // –†–∞–∑—Ä–µ—à–∞–µ–º CORS
  res.setHeader('Access-Control-Allow-Credentials', true);
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET,OPTIONS,PATCH,DELETE,POST,PUT');
  res.setHeader(
    'Access-Control-Allow-Headers',
    'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version'
  );

  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('EMAIL_USER:', process.env.EMAIL_USER ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');
    console.log('EMAIL_PASS:', process.env.EMAIL_PASS ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');

    const { userName, plantName, plantDescription, userLocation, plantImage, plantImageName, userPhoto, userPhotoName } = req.body;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!userName || !plantImage) {
      return res.status(400).json({ error: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ –æ—Ç:', userName);

    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è Gmail
    const transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: process.env.EMAIL_USER, // –≤–∞—à Gmail
        pass: process.env.EMAIL_PASS, // –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Gmail
      },
    });

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤–ª–æ–∂–µ–Ω–∏–π
    const attachments = [];

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è
    if (plantImage) {
      const plantImageData = plantImage.split(',')[1]; // –£–±–∏—Ä–∞–µ–º data:image/png;base64,
      attachments.push({
        filename: plantImageName || 'plant.png',
        content: plantImageData,
        encoding: 'base64',
      });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–ª—Ñ–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (userPhoto) {
      const userPhotoData = userPhoto.split(',')[1];
      attachments.push({
        filename: userPhotoName || 'user-photo.jpg',
        content: userPhotoData,
        encoding: 'base64',
      });
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º HTML –ø–∏—Å—å–º–∞
    const emailHTML = `
      <div style="font-family: 'Comic Sans MS', cursive; color: #247b27; padding: 20px;">
        <h2 style="color: #f4d03f; text-shadow: 2px 2px 4px rgba(0,0,0,0.3);">üå± –ù–æ–≤–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –¥–ª—è HTML-GARDEN!</h2>

        <div style="background-color: #f0f8f0; padding: 20px; border-radius: 10px; margin: 20px 0;">
          <h3 style="color: #247b27;">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</h3>
          <p><strong>–ò–º—è/–§–∞–º–∏–ª–∏—è:</strong> ${userName}</p>
          ${userLocation ? `<p><strong>–û—Ç–∫—É–¥–∞:</strong> ${userLocation}</p>` : ''}
        </div>

        <div style="background-color: #f0f8f0; padding: 20px; border-radius: 10px; margin: 20px 0;">
          <h3 style="color: #247b27;">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏:</h3>
          ${plantName ? `<p><strong>–ò–º—è —Ä–∞—Å—Ç–µ–Ω–∏—è:</strong> ${plantName}</p>` : '<p><em>–ò–º—è —Ä–∞—Å—Ç–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ</em></p>'}
          ${plantDescription ? `<p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${plantDescription}</p>` : '<p><em>–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ</em></p>'}
        </div>

        <div style="background-color: #fff3cd; padding: 15px; border-radius: 10px; margin: 20px 0;">
          <h3 style="color: #247b27;">üìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:</h3>
          <ul>
            <li>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è: ${plantImageName || 'plant.png'}</li>
            ${userPhotoName ? `<li>–°–µ–ª—Ñ–∏: ${userPhotoName}</li>` : '<li><em>–°–µ–ª—Ñ–∏ –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ</em></li>'}
          </ul>
        </div>

        <p style="color: #888; font-size: 12px; margin-top: 30px;">
          –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É HTML-GARDEN
        </p>
      </div>
    `;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
    await transporter.sendMail({
      from: `"HTML-GARDEN" <${process.env.EMAIL_USER}>`,
      to: 'emile.alexanyan@gmail.com',
      subject: `üå± –ù–æ–≤–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –æ—Ç ${userName}`,
      html: emailHTML,
      attachments: attachments,
    });

    return res.status(200).json({ success: true, message: 'Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!' });

  } catch (error) {
    console.error('Error sending email:', error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email', details: error.message });
  }
}
